-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("66657c2b-f130-4531-b4a5-fea13209997e",
	'Left_Many',
	24,
	'objLM',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("b0a84fb7-d1f2-44f3-8290-476669def307",
	"66657c2b-f130-4531-b4a5-fea13209997e",
	'Create_Relationships',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'#-------------------------------------------------------------------#
#
# Create relationships
#
# The architecture shall support the creation of a new object 
# instance at application start or and during execution
# 1241-0000-01-0101
#
# A mapping shall be provided for the ASL create statment, including 
# the extension which allows some or all atributes to be specified
# 1241-0000-01-0102
#
# The architecture shall provide a mechanism to allow creation of a 
# simple relationship link between two object instances
# 1241-0000-01-0603
#
# The architectureshall support a translation of the ASL link 
# statement to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

[] = RPT1:Start_Test[Test, "1241-0000-01-0603", "Relationships", "objLM", "Create relationships"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-1202"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0612"]

Has_Failed = TRUE

# Find the desired instances for Left Many Object
firstLM    = find-one Left_Many where idLM = 1
secondLM   = find-one Left_Many where idLM = 2
thirdLM    = find-one Left_Many where idLM = 3
tenthLM    = find-one Left_Many where idLM = 10
eleventhLM = find-one Left_Many where idLM = 11
twelthLM   = find-one Left_Many where idLM = 12

# Find the desired instances for Right Many Object
firstRM    = find-one Right_Many where idRM = 1
secondRM   = find-one Right_Many where idRM = 2
thirdRM    = find-one Right_Many where idRM = 3
tenthRM    = find-one Right_Many where idRM = 10
eleventhRM = find-one Right_Many where idRM = 11
twelthRM   = find-one Right_Many where idRM = 12

# Find the desired instances for Associative Object
secondAssoc   = find-one LMRM_Assoc where idLMRM = 2
thirdAssoc    = find-one LMRM_Assoc where idLMRM = 3
fourthAssoc   = find-one LMRM_Assoc where idLMRM = 4
fifthAssoc    = find-one LMRM_Assoc where idLMRM = 5
eighthAssoc   = find-one LMRM_Assoc where idLMRM = 8
ninthAssoc    = find-one LMRM_Assoc where idLMRM = 9
tenthAssoc    = find-one LMRM_Assoc where idLMRM = 10
eleventhAssoc = find-one LMRM_Assoc where idLMRM = 11
twelthAssoc   = find-one LMRM_Assoc where idLMRM = 12

# Find the desired instances for Bottom Many Object
firstBM  = find-one Bottom_Many where idBM = 1
thirdBM  = find-one Bottom_Many where idBM = 3
fourthBM = find-one Bottom_Many where idBM = 4
fifthBM  = find-one Bottom_Many where idBM = 5
tenthBM  = find-one Bottom_Many where idBM = 10

# Create associative Mc:Mc relationships
link firstLM  R15 firstRM  using secondAssoc
link firstLM  R15 thirdRM  using thirdAssoc
link secondLM R15 secondRM using fifthAssoc
link thirdLM  R15 firstRM  using fourthAssoc

link tenthLM    R15 tenthRM    using tenthAssoc
link tenthLM    R15 eleventhRM using eleventhAssoc
link tenthLM    R15 twelthRM   using twelthAssoc
link eleventhLM R15 eleventhRM using eighthAssoc
link twelthLM   R15 eleventhRM using ninthAssoc

# Create normal 1:Mc relationships
link secondAssoc R16 firstBM
link thirdAssoc  R16 firstBM
link thirdAssoc  R16 fifthBM
link fourthAssoc R16 firstBM
link fourthAssoc R16 thirdBM
link fifthAssoc  R16 fourthBM
link tenthAssoc  R16 tenthBM

# Create a couple of instances to prove the relationships
# For coding purposes, it is necessary to overspecify
# the relationship.

{A_RM_Set} = firstLM -> R15.Right_Many

{A_BM_Set} = fourthAssoc -> R16.Bottom_Many

{A_Assoc_Instance}  = thirdLM -> R15.LMRM_Assoc

No_In_BM_Set = countof {A_BM_Set}
No_In_Set    = countof {A_RM_Set}
No_In_Assoc  = countof {A_Assoc_Instance}

# Now check that the navigations can be performed
if No_In_Set    != 0 & \ 
   No_In_BM_Set != 0 & \   
   No_In_Assoc  != 0   \
then
   Has_Failed = FALSE
endif

#-------------------------------------------------------------------#
# Test complete
#-------------------------------------------------------------------#

if Has_Failed then
   [] = RPT3:Test_Failed["objLM", Test, -1]
else
   [] = RPT2:Test_Passed["objLM", Test, 0]
endif

#-------------------------------------------------------------------#',
	3,
	'',
	"00000000-0000-0000-0000-000000000000",
	2,
	1);
INSERT INTO O_TPARM
	VALUES ("ecfba94f-0bc3-42e3-9b27-bf2c7d007ecc",
	"b0a84fb7-d1f2-44f3-8290-476669def307",
	'Test',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("e11a167d-4d76-4b6f-9598-f85875933050",
	"66657c2b-f130-4531-b4a5-fea13209997e",
	'Left_Many_Navigation',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'#-------------------------------------------------------------------#
#
# Normal navigation
#
# The architecture shall implement  simple 1:M relationships
# 1241-0000-01-0602
#
# The architecture shall implement associative 1-M:M relationships
# 1241-0000-01-0610
# 
# The architecture shall provide operations which, given a starting  
# instance handle and a relationship specification, return single
# handle of the related instance
# 1241-0000-01-0701
#
# The architecture shall provide operations which, given a starting  
# instance handle and a relationship specification, return a set of
# handles of the related instance
# 1241-0000-01-0702
#
# The architecture shall support chains of navigations expressed in 
# ASL 
# 1241-0000-01-0704
# 
# The architecture shall support navigations to associative objects
# expressed in ASL
# 1241-0000-01-0706
#
# The architecture shall support navigations from singly associative
# objects expressed in ASL
# 1241-0000-01-0707
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

# Initialise the variables
Has_Failed   = FALSE
Failure_Code = 0
Supported    = TRUE

#-------------------------------------------------------------------#

# Find the desired instances for Left ManyObject
firstLM    = find-one Left_Many where idLM = 1
secondLM   = find-one Left_Many where idLM = 2
thirdLM    = find-one Left_Many where idLM = 3
tenthLM    = find-one Left_Many where idLM = 10
eleventhLM = find-one Left_Many where idLM = 11
twelthLM   = find-one Left_Many where idLM = 12

# Find the desired instances for Right Many Object
firstRM     = find-one Right_Many where idRM = 1
secondRM    = find-one Right_Many where idRM = 2
thirdRM     = find-one Right_Many where idRM = 3
tenthRM     = find-one Right_Many where idRM = 10
eleventhRM  = find-one Right_Many where idRM = 11
twelthRM    = find-one Right_Many where idRM = 12

# Find the desired instances for Associative Object
secondAssoc   = find-one LMRM_Assoc where idLMRM = 2
thirdAssoc    = find-one LMRM_Assoc where idLMRM = 3
fourthAssoc   = find-one LMRM_Assoc where idLMRM = 4
fifthAssoc    = find-one LMRM_Assoc where idLMRM = 5
eighthAssoc   = find-one LMRM_Assoc where idLMRM = 8
ninthAssoc    = find-one LMRM_Assoc where idLMRM = 9
tenthAssoc    = find-one LMRM_Assoc where idLMRM = 10
eleventhAssoc = find-one LMRM_Assoc where idLMRM = 11
twelthAssoc   = find-one LMRM_Assoc where idLMRM = 12

# Find the desired instances for Bottom Object
firstBM  = find-one Bottom_Many where idBM = 1
thirdBM  = find-one Bottom_Many where idBM = 3
fourthBM = find-one Bottom_Many where idBM = 4
fifthBM  = find-one Bottom_Many where idBM = 5
tenthBM  = find-one Bottom_Many where idBM = 10

#-------------------------------------------------------------------#
# Test 1 - Navigate from left many to associative object
#-------------------------------------------------------------------#

   if Iteration = 1 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objLM", "Nav from Left Many to Assoc"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetAssoc} = secondLM -> R15.LMRM_Assoc

      if countof {SetAssoc} = 0 then
         Has_Failed = TRUE
      else

         for InstAssoc in {SetAssoc} do

            if InstAssoc.idLMRM != 5 then
               Has_Failed = TRUE
               Failure_Code = -10
            endif

         endfor

      endif

   endif

# End Test 1

#-------------------------------------------------------------------#
# Test 2 - Navigate from the associative object to the bottom object
#-------------------------------------------------------------------#

   if Iteration = 2 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0707", "Relationships", "objLM", "Assoc object to Bottom Object"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetBM} = thirdAssoc -> R16.Bottom_Many

      if countof {SetBM} != 2 then
         Has_Failed = TRUE
      else
  
         Val1 = -10
         Val2 = -20

         for InstBM in {SetBM} do
 
            if InstBM.idBM = 1 then
               Val1 = InstBM.idBM   
            endif

            if InstBM.idBM = 5 then
               Val2 = InstBM.idBM
            endif

         endfor

         if Val1 = 1 then

            if Val2 != 5 then
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 2

#-------------------------------------------------------------------#
# Test 3 - Chained navigation from object BM to associative obejct 
#          then to object RM
#-------------------------------------------------------------------#

   if Iteration = 3 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objLM", "ObjBM to Assoc to ObjRM"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstRM = firstBM -> R16.LMRM_Assoc -> R15.Right_Many

      if InstRM.idRM != 1 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 3

#-------------------------------------------------------------------#
# Test 4 - Chained navigation from object BM to associative object 
#          to object LM
#-------------------------------------------------------------------#

   if Iteration = 4 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objLM", "ObjBM to Assoc to ObjLM"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstLM = firstBM -> R16.LMRM_Assoc -> R15.Left_Many

      if InstLM.idLM != 3 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 4

#-------------------------------------------------------------------#
# Test 5 - Full navigation
#-------------------------------------------------------------------#

   if Iteration = 5 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objLM", "Full navigation"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0706"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetRM} = secondLM -> R15.LMRM_Assoc -> R16.Bottom_Many -> R16.LMRM_Assoc -> R15.Right_Many

      if countof {SetRM} != 1 then
         Has_Failed   = TRUE
         Failure_Code = countof {SetRM}
      endif

   endif

# End Test 5

#-------------------------------------------------------------------#
# Test 6 - Correlated associative navigation
#-------------------------------------------------------------------#

   if Iteration = 6 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objLM", "Correlated Assoc"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0701"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {Assoc1} = firstLM -> R15.LMRM_Assoc
      {Assoc2} = firstRM -> R15.LMRM_Assoc
      {SetRM}  = firstLM -> R15.Right_Many

      FirstInstFound  = FALSE
      SecondInstFound = FALSE
      ThirdInstFound  = FALSE

      for RMInst in {SetRM} do

         if RMInst.idRM = 1 then
            FirstInstFound = TRUE

            for InstAssoc1 in {Assoc1} do

               if InstAssoc1.idLMRM = 2 then
                  SecondInstFound = TRUE
  
                  for InstAssoc2 in {Assoc2} do      

                     if InstAssoc2.idLMRM = 2 then
                        ThirdInstFound = TRUE
                        InstAssoc = firstLM and firstRM -> R15.LMRM_Assoc
                     endif

                  endfor

               endif

            endfor

         endif

      endfor

      if FirstInstFound then

         if SecondInstFound then

            if ThirdInstFound then
            
               if InstAssoc != UNDEFINED then

                  if InstAssoc.idLMRM != 2 then
                     Has_Failed = TRUE
                     Failure_Code = InstAssoc.idLMRM
                  endif

               else
                  Has_Failed = TRUE
                  Failure_Code = -20
               endif

            else
               Has_Failed = TRUE
               Failure_Code  = -30
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -40
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -50
      endif

   endif

# End Test 6

#-------------------------------------------------------------------#
# Test 7 - Navigate from the first instance of the right object to 
#          the associative object to return a set
#-------------------------------------------------------------------#

   if Iteration = 7 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objLM", "ObjRM to Assoc to ObjBM"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetAssoc} = firstRM -> R15.LMRM_Assoc
            
      if countof{SetAssoc} = 2 then

         Val1 = -10
         Val2 = -20

         for InstAssoc in {SetAssoc} do
   
            if InstAssoc.idLMRM = 2 then
               Val1 = InstAssoc.idLMRM
            endif

            if InstAssoc.idLMRM = 4 then
               Val2 = InstAssoc.idLMRM
            endif

         endfor

         if Val1 = 2 then

            if Val2 !=  4 then
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -30
      endif     

   endif

# End Test 7

#-------------------------------------------------------------------#
# Test 8 - Correlated associative navigation from first instance of 
#          the left many object and the first instance of the right
#          many object to the associative object and then to the
#          bottom many object
#
#          N.B. Correlated associative navigation cannot form part of
#          chained navigation
#-------------------------------------------------------------------#

   if Iteration = 8 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objLM", "ObjRM and Obj LM to Assoc to ObjBM"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0704"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {Assoc1} = tenthLM -> R15.LMRM_Assoc
      {Assoc2} = tenthRM -> R15.LMRM_Assoc

      FirstInstFound = FALSE
      SecondInstFound = FALSE

      for AssocInst1 in {Assoc1} do

         if AssocInst1.idLMRM = 10 then
            FirstInstFound = TRUE

            for AssocInst2 in {Assoc2} do

               if AssocInst2.idLMRM = 10 then
                  SecondInstFound = TRUE      
                  InstAssoc = tenthLM and tenthRM -> R15.LMRM_Assoc       
               endif

            endfor

         endif

      endfor

      if FirstInstFound then

         if SecondInstFound then

            if InstAssoc != UNDEFINED then

               {SetBM} = InstAssoc -> R16.Bottom_Many
                  
               if countof{SetBM} != 1 then
                  Has_Failed = TRUE
                  Failure_Code = -10
               else

                  for InstBM in {SetBM} do

                     if InstBM.idBM != 10 then
                        Has_Failed   = TRUE
                        Failure_Code = InstBM.idBM
                     endif

                  endfor
           
               endif

            else
               Has_Failed = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -30
      endif

   endif

# End Test 8

#-------------------------------------------------------------------#
# Test 9 - Perform correlated associative navigation from the 11th
#          instance of the Left Many object and the 11th instance of
#          the Right Many object to the 8th instance of the 
#          Associative object
#-------------------------------------------------------------------#

   if Iteration = 9 then
      
      Failure_Code = 0

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objLM", "Correlated"]

      InstAssoc = eleventhLM and eleventhRM -> R15.LMRM_Assoc

      if InstAssoc != UNDEFINED then

         if InstAssoc.idLMRM != 8 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      endif

   endif

# End Test 9

#-------------------------------------------------------------------#
# Test 10 - Perform correlated associative navigation from the 10th
#           instance of the Left Many object and the 11th instance of
#           Right MAny object to the 11th instance of the Associative
#           object
#-------------------------------------------------------------------#

   if Iteration = 10 then
      
      Failure_Code = 0

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objLM", "Correlated"]

      InstAssoc = tenthLM and eleventhRM -> R15.LMRM_Assoc

      if InstAssoc != UNDEFINED then

         if InstAssoc.idLMRM != 11 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      endif

   endif

# End Test 10

#-------------------------------------------------------------------#
# Report start of the test
#-------------------------------------------------------------------#

if Supported = TRUE then

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objLM", Test, 0]
   else
      [] = RPT3:Test_Failed["objLM", Test, Failure_Code]
   endif

else
   [] = RPT4:Test_Unsupported[Test]
endif

#-------------------------------------------------------------------#
',
	3,
	'',
	"b0a84fb7-d1f2-44f3-8290-476669def307",
	2,
	2);
INSERT INTO O_TPARM
	VALUES ("780c9c87-55c5-4bd9-b4c8-48f04f772662",
	"e11a167d-4d76-4b6f-9598-f85875933050",
	'Iteration',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("2b30f144-dee4-4116-a651-b3a16b75cdac",
	"e11a167d-4d76-4b6f-9598-f85875933050",
	'Test',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"780c9c87-55c5-4bd9-b4c8-48f04f772662",
	'');
INSERT INTO O_TFR
	VALUES ("d821bc5a-23c7-4862-ace8-d51da1abdb42",
	"66657c2b-f130-4531-b4a5-fea13209997e",
	'Delete_Relationships',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'#-------------------------------------------------------------------#
#
# Delete all relationships
#
# The architecture shall provide a mapping from the ASL delete
# instance statement to the deletion mechanism
# 1241-0000-01-0121
#
# The architecture shall provide a mechanism to allow deletion of a 
# simple relational link between two object instances
# 1241-0000-01-0604
#
# The architecture shall provide a mechanism to allow the deletion of
# an associative object and the link between two objects
# 1241-0000-01-0612
#
# The architecture shall provide a mechanism to allow the deletion of
# a link between two objects in an associative relationship
# 1241-0000-01-0613
#
# The architecture shall support a translation of the ASL unassociate
# statment to map to the mechanism that allows the deletion of an 
# associative link between an associative object and the link between
# two objects
# 1241-0000-01-1203
#
# The architecture shall support a translation of the ASL unlink
# statement to map to the mechanism that allow the deletion of a 
# link between two objects in a relationship
# 1241-0000-01-1204
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

# Initialise the variables
Has_Failed   = FALSE
Failure_Code = 0

[] = RPT1:Start_Test[Test, "1241-0000-01-0604", "Relationships", "objLM", "Delete all relationships"]

[] = RPT8:Specify_Requid[Test, "1241-0000-01-0612"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-0613"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-1203"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-1204"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0621"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0622"]

# Find the desired instances for Left Many Object
firstLM    = find-one Left_Many where idLM = 1
secondLM   = find-one Left_Many where idLM = 2
thirdLM    = find-one Left_Many where idLM = 3
tenthLM    = find-one Left_Many where idLM = 10
eleventhLM = find-one Left_Many where idLM = 11
twelthLM   = find-one Left_Many where idLM = 12

# Find the desired instances for Right Many Object
firstRM     = find-one Right_Many where idRM = 1
secondRM    = find-one Right_Many where idRM = 2
thirdRM     = find-one Right_Many where idRM = 3
tenthRM     = find-one Right_Many where idRM = 10
eleventhRM  = find-one Right_Many where idRM = 11
twelthRM    = find-one Right_Many where idRM = 12

# Find the desired instances for Bottom Many Object
firstBM  = find-one Bottom_Many where idBM = 1
thirdBM  = find-one Bottom_Many where idBM = 3
fourthBM = find-one Bottom_Many where idBM = 4
fifthBM  = find-one Bottom_Many where idBM = 5
tenthBM  = find-one Bottom_Many where idBM = 10

# Find the desired instances for Associative Object
secondAssoc   = find-one LMRM_Assoc where idLMRM = 2
thirdAssoc    = find-one LMRM_Assoc where idLMRM = 3
fourthAssoc   = find-one LMRM_Assoc where idLMRM = 4
fifthAssoc    = find-one LMRM_Assoc where idLMRM = 5
eighthAssoc   = find-one LMRM_Assoc where idLMRM = 8
ninthAssoc    = find-one LMRM_Assoc where idLMRM = 9
tenthAssoc    = find-one LMRM_Assoc where idLMRM = 10
eleventhAssoc = find-one LMRM_Assoc where idLMRM = 11
twelthAssoc   = find-one LMRM_Assoc where idLMRM = 12

# Delete all relationships
unassociate firstLM  R15 firstRM  from secondAssoc
unassociate firstLM  R15 thirdRM  from thirdAssoc
unassociate secondLM R15 secondRM from fifthAssoc
unassociate thirdLM  R15 firstRM  from fourthAssoc

unassociate tenthLM    R15 tenthRM    from tenthAssoc
unassociate tenthLM    R15 eleventhRM from eleventhAssoc
unassociate tenthLM    R15 twelthRM   from twelthAssoc
unassociate eleventhLM R15 eleventhRM from eighthAssoc
unassociate twelthLM   R15 eleventhRM from ninthAssoc

unlink tenthAssoc R16 tenthBM

unlink secondAssoc R16 firstBM
unlink thirdAssoc  R16 firstBM
unlink thirdAssoc  R16 fifthBM
unlink fourthAssoc R16 firstBM
unlink fourthAssoc R16 thirdBM
unlink fifthAssoc  R16 fourthBM

unlink firstLM    R15 firstRM
unlink firstLM    R15 thirdRM
unlink secondLM   R15 secondRM
unlink thirdLM    R15 firstRM
unlink tenthLM    R15 tenthRM    
unlink tenthLM    R15 eleventhRM 
unlink tenthLM    R15 twelthRM
unlink eleventhLM R15 eleventhRM 
unlink twelthLM   R15 eleventhRM 
# Test that the unlinking has been performed

{SetAssoc} = firstLM -> R15.LMRM_Assoc
{SetBM}    = thirdAssoc -> R16.Bottom_Many
InstRM     = fifthAssoc -> R15.Right_Many

if countof {SetAssoc} = 0 then
   
   if countof {SetBM} = 0 then

      if InstRM != UNDEFINED then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -20
   endif

else
   Has_Failed = TRUE
   Failure_Code = -30
endif

if not Has_Failed then

   {SetLM}    = find-all Left_Many
   {SetRM}    = find-all Right_Many
   {SetAssoc} = find-all LMRM_Assoc
   {SetBM}    = find-all Bottom_Many

   for InstLM in {SetLM} do
      delete InstLM
   endfor

   for InstRM in {SetRM} do
      delete InstRM
   endfor

   for InstAssoc in {SetAssoc} do
      delete InstAssoc
   endfor

   for InstBM in {SetBM} do
      delete InstBM
   endfor

   {SetLM}    = find-all Left_Many
   {SetRM}    = find-all Right_Many
   {SetAssoc} = find-all LMRM_Assoc
   {SetBM}    = find-all Bottom_Many

   if countof {SetLM} = 0 then

      if countof {SetRM} = 0 then

         if countof {SetAssoc} = 0 then

            if countof {SetBM} != 0 then
               Has_Failed   = TRUE
               Failure_Code = -40
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -50
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -60
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -70
   endif

endif

#-------------------------------------------------------------------#
# Test complete
#-------------------------------------------------------------------#

if Has_Failed then
   [] = RPT3:Test_Failed["objLM", Test, Failure_Code]
else
   [] = RPT2:Test_Passed["objLM", Test, 0]
endif

#-------------------------------------------------------------------#',
	3,
	'',
	"e11a167d-4d76-4b6f-9598-f85875933050",
	2,
	3);
INSERT INTO O_TPARM
	VALUES ("dd366032-7afc-4516-8cb3-bdad5a59a979",
	"d821bc5a-23c7-4862-ace8-d51da1abdb42",
	'Test',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("0836e917-da77-43a0-9022-c947fee0df5f",
	"66657c2b-f130-4531-b4a5-fea13209997e");
INSERT INTO O_BATTR
	VALUES ("0836e917-da77-43a0-9022-c947fee0df5f",
	"66657c2b-f130-4531-b4a5-fea13209997e");
INSERT INTO O_ATTR
	VALUES ("0836e917-da77-43a0-9022-c947fee0df5f",
	"66657c2b-f130-4531-b4a5-fea13209997e",
	"00000000-0000-0000-0000-000000000000",
	'idLM',
	'',
	'',
	'idLM',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("c4eee013-60ad-44ff-a714-f38346cb73ba",
	"66657c2b-f130-4531-b4a5-fea13209997e");
INSERT INTO O_BATTR
	VALUES ("c4eee013-60ad-44ff-a714-f38346cb73ba",
	"66657c2b-f130-4531-b4a5-fea13209997e");
INSERT INTO O_ATTR
	VALUES ("c4eee013-60ad-44ff-a714-f38346cb73ba",
	"66657c2b-f130-4531-b4a5-fea13209997e",
	"0836e917-da77-43a0-9022-c947fee0df5f",
	'ResultA',
	'',
	'',
	'ResultA',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("e318cca8-ed23-4c3d-a151-397d10e66da7",
	"66657c2b-f130-4531-b4a5-fea13209997e");
INSERT INTO O_BATTR
	VALUES ("e318cca8-ed23-4c3d-a151-397d10e66da7",
	"66657c2b-f130-4531-b4a5-fea13209997e");
INSERT INTO O_ATTR
	VALUES ("e318cca8-ed23-4c3d-a151-397d10e66da7",
	"66657c2b-f130-4531-b4a5-fea13209997e",
	"c4eee013-60ad-44ff-a714-f38346cb73ba",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"66657c2b-f130-4531-b4a5-fea13209997e");
INSERT INTO O_OIDA
	VALUES ("0836e917-da77-43a0-9022-c947fee0df5f",
	"66657c2b-f130-4531-b4a5-fea13209997e",
	0,
	'idLM');
INSERT INTO O_ID
	VALUES (1,
	"66657c2b-f130-4531-b4a5-fea13209997e");
INSERT INTO O_ID
	VALUES (2,
	"66657c2b-f130-4531-b4a5-fea13209997e");
INSERT INTO PE_PE
	VALUES ("66657c2b-f130-4531-b4a5-fea13209997e",
	1,
	"1a16545d-ab33-4153-84c6-9d8e9f7ca024",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("1a16545d-ab33-4153-84c6-9d8e9f7ca024",
	"00000000-0000-0000-0000-000000000000",
	"6d141527-9fd5-4054-8692-9fc325055afc",
	'Relationships',
	'',
	0,
	'../Relationships.xtuml');
