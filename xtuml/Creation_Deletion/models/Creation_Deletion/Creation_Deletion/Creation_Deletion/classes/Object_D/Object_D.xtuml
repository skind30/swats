-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("422351b6-ef0a-4ade-b14f-59a10353b86d",
	'Object_D',
	6,
	'objD',
	' Object_D is manipulated by object ''Instance_Deletion''.
',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("cf120b0c-57db-4a5c-8e91-1415ffd5ad13",
	"422351b6-ef0a-4ade-b14f-59a10353b86d",
	'do_deletion_tests',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'#------------------------------------------------------------------------#
# do deletion tests
#------------------------------------------------------------------------#

   Test = Test_Number

   # Preparation for instance deletion

   count = 8

   loop
      find_and_delete_D = create Object_D with ReferenceD = count &\
                                               IntegerA   = count
      count = count - 1
      breakif count = 0
   endloop

#------------------------------------------------------------------------#
# Test 1 - Attempt to delete an instance of Object_D where the condition 
#          is unfulfilled, NO INSTANCE DELETED
#
#          FOR THE PURPOSES OF THIS TEST, ONLY A SINGLE INSTANCE DELETION 
#          IS REQUIRED.
#
# Note : The ISIM seems to have a problem attempting to delete an instance
#        that isn''t there. So there must be a check performed for the
#        existance of an instance before squashing it.
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "objD find and delete", "A is False"]
   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   an_instanceD = find-one Object_D where ReferenceD > 100

   if an_instanceD != UNDEFINED then
      delete an_instanceD
      has_failed = TRUE
   endif

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D

   if countof {before_setD} != countof {after_setD} then
     has_failed = TRUE
   endif

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test, 0]
   else
      [] = RPT3:Test_Failed["objD", Test, -10]
   endif

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - Attempt to delete an instance of Object_D where only one of the
#          conditions are fulfilled, NO INSTANCE DELETED
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "objD find and delete", "A and B is False"]

   has_failed = FALSE

   Failure_Code = (-2)

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Perform a find where before deleting the instance of Object_D (TB)
   an_instanceD = find-one Object_D where ReferenceD = 1 & IntegerA = 30

   # There must be a check to prevent attempted deletion of
   # an instance that doesn''t exist.

   if an_instanceD != UNDEFINED then
      delete an_instanceD
      Failure_Code = Failure_Code + 1
   endif

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D

   if countof {before_setD} != countof {after_setD} then
      [] = RPT3:Test_Failed["objD", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["objD", Test, 0]
   endif

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#
# Test 3  - Attempt to delete an instance of Object_D where only one of 
#           the ''and'' conditions are fulfilled, NO INSTANCE DELETED
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid",  "Creation Deletion", "objD find and delete", "A and  BorC is False"]

   has_failed = FALSE
   Failure_Code = (-2)

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Perform test
   an_instanceD = find-one Object_D where IntegerA = 30 & (ReferenceD = 1 | ReferenceD = 2)

   if an_instanceD != UNDEFINED then
      # Try and delete the instance. This is a failure, as the find should 
      # not have actually found an instance.
      delete an_instanceD
      Failure_Code = Failure_Code + 1
   endif

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D

   if countof{before_setD} != countof{after_setD} then
      [] = RPT3:Test_Failed["objD", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["objD", Test, 0]
   endif

   Test = Test + 1

# End Test 3
 
#------------------------------------------------------------------------#
# Test 4 - Delete single instance
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0531", "Creation Deletion", "ObjD find and delete", "Delete single instance"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   Failure_Code = (-5)

   # Find the instance using only one attribute.
   an_instanceD = find-one Object_D where ReferenceD = 1

   # Find all instances in the set before any deletions take place.
   {Before_Deletion} = find-all Object_D

   if an_instanceD = UNDEFINED then
      Failure_Code = Failure_Code + 1
   else
      # Delete the instance found, which does exist.
      delete an_instanceD

      # Check that it has been deleted, by checking first against the
      # used attribute; ReferenceD, and then by the unused attribute; IntegerA.
      an_instanceD = find-one Object_D where ReferenceD = 1

      if an_instanceD = UNDEFINED then
         an_instanceAD = find-one Object_D where IntegerA = 1

         if an_instanceAD = UNDEFINED then
            # Use the find operation on the set to prove that the instance has gone
            # from within the set.

            {After_Deletion} = find-all Object_D

            if countof {Before_Deletion} != countof {After_Deletion} then
               Failure_Code = 0
            else
               Failure_Code = Failure_Code + 2
            endif

         else
            Failure_Code = Failure_Code + 3
         endif

      else
         Failure_Code = Failure_Code + 4
      endif

   endif

   if Failure_Code = 0 then
      [] = RPT2:Test_Passed["objD", Test, Failure_Code]
   else
      [] = RPT3:Test_Failed["objD", Test, Failure_Code]
   endif

   Test=Test + 1

# End Test 4

#------------------------------------------------------------------------#
# Test 5 -Delete instance of Object_D where multiple condition are
#         fulfilled
#         ONE INSTANCE IS DELETED
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0121", "Creation Deletion", "ObjD find and delete", "single instance multiple conditions met"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0531"]

   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   #Find an instanceD using find where before attempting to delete. (TB)
   an_instanceD = find-one Object_D where ReferenceD = 2 & IntegerA = 2

   if an_instanceD != UNDEFINED then
      delete an_instanceD
   endif

   # We are more concerened that the instance in question has actually been deleted, rather
   # than an instance has been deleted from the set. To this end, we shall check that
   # the specific instance in question really has bitten the dust.
   Should_Be_Deleted = find-one Object_D where ReferenceD = 2 & IntegerA = 2

   if Should_Be_Deleted != UNDEFINED then
      [] = RPT3:Test_Failed["objD", Test, -8]
      has_failed = TRUE
   endif
	
   {after_setD} = find-all Object_D

   if countof {before_setD} = countof {after_setD} then
      [] = RPT3:Test_Failed["objD", Test, -9]
      has_failed = TRUE
   endif

   #Ensure that the correct instance was deleted
   for each_instanceD in {after_setD} do
      if each_instanceD.ReferenceD = 2 then
		         	    
         [] = RPT3:Test_Failed["objD", Test, -10]
         has_failed = TRUE

      endif

   endfor

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test,0]
   endif

   Test=Test + 1

#End Test 5

#------------------------------------------------------------------------#
# Test 6 - Delete instance of Object_D where multiple condition are 
#          fulfilled
#          ONE INSTANCE IS DELETED
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD find and delete","delete 1 instance where multiple conditions fulfilled"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Not currently supported by code gen.
   #   delete Object_D where ReferenceD = 7 & (IntegerA = 30 | IntegerA = 7)
   # Neither is this
   delete Object_D where ReferenceD = 7 & IntegerA = 30
   delete Object_D where ReferenceD = 7 & IntegerA = 7

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D
   size_after = (countof {after_setD}) + 1

   if countof {before_setD} = countof {after_setD} then
       [] = RPT3:Test_Failed["objD", Test, -13]
       has_failed = TRUE
   endif

   #Ensure that the correct instance was deleted
   for each_instanceD in {after_setD} do

      if each_instanceD.ReferenceD = 7 then
          [] = RPT3:Test_Failed["objD", Test, -14]
          has_failed = TRUE
      endif

   endfor

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test,0]
   endif

   Test = Test + 1

# End Test 6

#------------------------------------------------------------------------#
# Test 7 - Delete an instance of Object_D
#          ONE INSTANCE IS DELETED
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "objD find and delete", "Deletion of one instance"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Find an instance to delete
   an_instanceD = find-one Object_D where ReferenceD = 8

   # Perform test
   if an_instanceD !=UNDEFINED then
      delete an_instanceD
   endif

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D
   size_after = (countof {after_setD}) + 1

   if countof {before_setD} != size_after then

      [] = RPT3:Test_Failed["objD", Test,-15]
      has_failed = TRUE

   endif

   # Ensure that the correct instance was deleted
   for each_instanceD in {after_setD} do

      if each_instanceD.ReferenceD = 8 then
         [] = RPT3:Test_Failed["objD", Test, -16]
         has_failed = TRUE
      endif

   endfor

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test, 0]
   endif

# End Test 7

#------------------------------------------------------------------------#
# Preparation for instance deletion
#------------------------------------------------------------------------#

count = 8
loop
   find_and_delete_D = create Object_D with ReferenceD = count &\
                               IntegerA = count
   count = count - 1
   breakif count = 0
endloop

#------------------------------------------------------------------------#
# Test 8
# Attempt to delete an instance of Object_D where the condition is
# unfulfilled, NO INSTANCE DELETED
#
# FOR THE PURPOSES OF THIS TEST, ONLY A SINGLE INSTANCE DELETION IS 
# REQUIRED.
#
# Note : The ISIM seems to have a problem attempting to delete an instance
#        that isn''t there. So there must be a check performed for the
#        existance of an instance before squashing it.
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "delete where", "A is False"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Perform test
   delete Object_D where ReferenceD > 100

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D
   if countof {before_setD} != countof {after_setD} then
     [] = RPT3:Test_Failed["objD", Test, -1]
     has_failed = TRUE
   endif

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test, 0]
   endif

#End Test 8

#------------------------------------------------------------------------#
# Test 9 - Attempt to delete an instance of Object_D where only one of the
#          conditions are fulfilled, NO INSTANCE DELETED
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "objD delete where", "A and B is False"]

   has_failed = FALSE

   Failure_Code = (-2)

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Perform test
   delete Object_D where ReferenceD = 1 & IntegerA = 30

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D

   if countof {before_setD} != countof {after_setD} then
      [] = RPT3:Test_Failed["objD", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["objD", Test, 0]
   endif

#End Test 9

#------------------------------------------------------------------------#
# Test 10 - Attempt to delete an instance of Object_D where only one of 
#          the ''and'' conditions are fulfilled, NO INSTANCE DELETED
#------------------------------------------------------------------------#

   Test= Test + 1

   [] = RPT1:Start_Test[Test, "Null Requid",  "Creation Deletion", "delete where", "A and BorC is False"]

   has_failed = FALSE
   Failure_Code = (-2)

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Perform test
   delete Object_D where IntegerA = 30 & (ReferenceD = 1 | ReferenceD = 2)

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D

   # Also this will prove that the function count-of can be used like this
   # without having recourse to a local temp variable or two. It is the only
   # function so far that can be used like this.

   if countof{before_setD} != countof{after_setD} then
      [] = RPT3:Test_Failed["objD", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["objD", Test, 0]
   endif

# End Test 10
 
#------------------------------------------------------------------------#
# Test 11
#------------------------------------------------------------------------#

   Test = Test + 1
   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "ObjD delete where", "delete single instance"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   Failure_Code = (-5)

   # Find all instances in the set before any deletions take place.
   {Before_Deletion} = find-all Object_D

   # Delete the instance found, which does exist.
   delete Object_D where ReferenceD = 1

   # Check that it has been deleted, by checking first against the
   # used attribute; ReferenceD, and then by the unused attribute; IntegerA.
   an_instanceD = find-one Object_D where ReferenceD = 1

   if an_instanceD = UNDEFINED then
      an_instanceAD = find-one Object_D where IntegerA = 1

      if an_instanceAD = UNDEFINED then
         # Use the find operation on the set to prove that the instance has gone
         # from within the set.
         {After_Deletion} = find-all Object_D

         if countof {Before_Deletion} != countof {After_Deletion} then
            Failure_Code = 0
         else
            Failure_Code = Failure_Code + 2
         endif

      else
         Failure_Code = Failure_Code + 3
      endif

   else
      Failure_Code = Failure_Code + 4
   endif

   if Failure_Code = 0 then
      [] = RPT2:Test_Passed["objD", Test, Failure_Code]
   else
      [] = RPT3:Test_Failed["objD", Test, Failure_Code]
   endif

# End Test 11
#------------------------------------------------------------------------#
# Test 12 - Delete instance of Object_D where multiple condition are 
#           fulfilled
#           ONE INSTANCE IS DELETED
#------------------------------------------------------------------------#

   Test=Test + 1
   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "ObjD delete where", "single instance multiple conditions met"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Perform test
   # Find an instanceD using find where before attempting to delete. (TB)
   delete Object_D where ReferenceD = 2 & IntegerA = 2

   # We are more concerened that the instance in question has actually been deleted, rather
   # than an instance has been deleted from the set. To this end, we shall check that
   # the specific instance in question really has bitten the dust.

   Should_Be_Deleted = find-one Object_D where ReferenceD = 2 & IntegerA = 2

   if Should_Be_Deleted != UNDEFINED then
      [] = RPT3:Test_Failed["objD", Test, -8]
      has_failed = TRUE
   endif
	
   {after_setD} = find-all Object_D

   if countof {before_setD} = countof {after_setD} then
      [] = RPT3:Test_Failed["objD", Test, -9]
      has_failed = TRUE
   endif

   #Ensure that the correct instance was deleted
   for each_instanceD in {after_setD} do

      if each_instanceD.ReferenceD = 2 then
         [] = RPT3:Test_Failed["objD", Test, -10]
         has_failed = TRUE
      endif

   endfor

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test,0]
   endif

# End Test 12

#------------------------------------------------------------------------#
# Test 13 - Delete instance of Object_D where multiple condition are 
#           fulfilled
#           ONE INSTANCE IS DELETED
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD delete where ","single instance deleted"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   #Perform test
   delete Object_D where ReferenceD = 7 & (IntegerA = 30 | IntegerA = 7)

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D

   if countof {before_setD} = countof {after_setD} then
       [] = RPT3:Test_Failed["objD", Test, -13]
       has_failed = TRUE
   endif

   #Ensure that the correct instance was deleted
   for each_instanceD in {after_setD} do

      if each_instanceD.ReferenceD = 7 then
          [] = RPT3:Test_Failed["objD", Test, -14]
          has_failed = TRUE
      endif

   endfor

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test,0]
   endif

# End Test 13

#------------------------------------------------------------------------#
# Test 14 - Delete an instance of Object_D
#           ONE INSTANCE IS DELETED
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD delete where", "Deletion of one instance"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   has_failed = FALSE

   # Establish how many instances already exist
   {before_setD} = find-all Object_D

   # Find an instance to delete
   delete Object_D where ReferenceD = 8

   # Check that no instance have been deleted
   {after_setD} = find-all Object_D

   if countof {before_setD} = countof {after_setD} then
      [] = RPT3:Test_Failed["objD", Test,-15]
      has_failed = TRUE
   endif

   # Ensure that the correct instance was deleted
   for each_instanceD in {after_setD} do

      if each_instanceD.ReferenceD = 8 then
         [] = RPT3:Test_Failed["objD", Test, -16]
         has_failed = TRUE
      endif

   endfor

   if !has_failed then
      [] = RPT2:Test_Passed["objD", Test, 0]
   endif

# End Test 14

#------------------------------------------------------------------------#
# Test 15 - Deletion of all remaining instances.
#------------------------------------------------------------------------#

   Test = Test + 1
   
   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD delete", "All remaining instance handles"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]

   {before_operation} = find-all Object_D

   # Use for making sure that all remaining instances have actually been deleted.
   what_we_want = 0

   has_failed = FALSE

   Failure_Code = 0

   # Delete all remaining instances. Or at least all thise whose ReferencD
   # attribute is less than 100. This should be all of them.
   delete Object_D where ReferenceD < 100

   {after_operation} = find-all Object_D

   # None have been deleted
   if countof {before_operation} = countof {after_operation} then
      has_failed = TRUE
      Failure_Code = (-1)
   else
      # Try and find any instance, doesn''t matter what it''s attributes are.
      any_instance = find-one Object_D

      # The instance is still defined.
      if any_instance != UNDEFINED then
         Failure_Code = (-2)
         has_failed = TRUE
      else
         # An instance has been found.
         if what_we_want != countof {after_operation} then
            Failure_Code = (-3)
            has_failed = TRUE
         endif

      endif

   endif

   if has_failed = TRUE then
      [] = RPT3:Test_Failed["ObjD", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["ObjD", Test, Failure_Code]
   endif

# End Test 15

#------------------------------------------------------------------------#
# Test 16 - Deallocation of instance handles
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1241-0000-01-0120", "Creation Deletion", "objD delete", "Deallocation of instance handles"]
   [] = RPT5:Test_Text[Test, "Deallocation of instance handles is unsupported"]
   [] = RPT4:Test_Unsupported[Test]

#------------------------------------------------------------------------#

Returned_Test_Number = Test 

#Tests Complete

',
	3,
	'',
	"00000000-0000-0000-0000-000000000000",
	2,
	1);
INSERT INTO O_TPARM
	VALUES ("28b04bf1-51ff-474c-a648-e11ea78a7af1",
	"cf120b0c-57db-4a5c-8e91-1415ffd5ad13",
	'Test_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("4a5e2fc2-8d23-4ac1-859b-6e46f218a8c8",
	"cf120b0c-57db-4a5c-8e91-1415ffd5ad13",
	'Returned_Test_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	"28b04bf1-51ff-474c-a648-e11ea78a7af1",
	'');
INSERT INTO O_TFR
	VALUES ("d7073c70-19f5-4c8a-b4c9-cde13d79637a",
	"422351b6-ef0a-4ade-b14f-59a10353b86d",
	'do_multiple_deletion_tests',
	' This service shall prove that deletion of multiple instances from a
 set is correct.
',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'#------------------------------------------------------------------------#
# do multiple deletion tests
#------------------------------------------------------------------------#

   Test = Test_Number

   # Preparation for instance deletion
   count = 10

   loop
      find_and_delete_D = create Object_D with ReferenceD = count &\
                                               IntegerA = count
      count = count - 1
      breakif count = 0
   endloop

#------------------------------------------------------------------------#
# Test 1 - Fully specify both instances
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD multiple delete", "Fully specify both instances"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0122"]

   # Delete two instances that meet the search criteria
   {before_operation} = find-all Object_D

   # Use for making sure that only two instances have actually been deleted.
   what_we_want = countof {before_operation}
   what_we_want = what_we_want - 2

   has_failed = FALSE
  
   failure_code = 0

   # Delete two instances where both attributes for both instances are specified.
   delete Object_D where (ReferenceD = 1 & IntegerA = 1) | (ReferenceD = 2 & IntegerA = 2)

   {after_operation} = find-all Object_D

   # None have been deleted
   if countof {before_operation} = countof {after_operation} then
      has_failed = TRUE
      failure_code = (-1)
   else
      # Try and find the instances directly
      first_instance  = find-one Object_D where ReferenceD = 1 & IntegerA = 1
      second_instance = find-one Object_D where ReferenceD = 2 & IntegerA = 2

      if first_instance != UNDEFINED then
         failure_code = (-2)
         has_failed = TRUE
      else

         if second_instance != UNDEFINED then
            failure_code = (-3)
            has_failed = TRUE
         else
            # More or less than two instances have been deleted
            if what_we_want != countof {after_operation} then
               failure_code = (-4)
               has_failed = TRUE
            endif
   
         endif

      endif

   endif

   if has_failed = TRUE then
      [] = RPT3:Test_Failed["ObjD", Test, failure_code]
   else
      [] = RPT2:Test_Passed["ObjD", Test, failure_code]
   endif

# End Test 1

#------------------------------------------------------------------------#
# Test 2
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD multiple delete", "Diff attributes diff instances"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0122"]

   # Delete two instances that meet the search criteria
   {before_operation} = find-all Object_D

   # Use for making sure that only two instances have actually been deleted.
   what_we_want = countof {before_operation}
   what_we_want = what_we_want - 2

   has_failed = FALSE

   failure_code = 0

   # Delete two instances where one attribute for both instances are specified.
   delete Object_D where ReferenceD = 3 | IntegerA = 4

   {after_operation} = find-all Object_D

   # None have been deleted
   if countof {before_operation} = countof {after_operation} then
      has_failed = TRUE
      failure_code = (-1)
   else
      # Try and find the instances directly
      third_instance  = find-one Object_D where ReferenceD = 3 & IntegerA = 3
      fourth_instance = find-one Object_D where ReferenceD = 4 & IntegerA = 4

      if third_instance != UNDEFINED then
         failure_code = (-2)
         has_failed = TRUE
      else

         if fourth_instance != UNDEFINED then
            failure_code = (-3)
            has_failed = TRUE
         else
            what_we_got = countof {after_operation}

            # More or less than two instances have been deleted
            if what_we_want != what_we_got then
               failure_code = (-4)
               has_failed = TRUE
            endif

         endif

      endif

   endif

   if has_failed = TRUE then
      [] = RPT3:Test_Failed["ObjD", Test, failure_code]
   else
      [] = RPT2:Test_Passed["ObjD", Test, failure_code]
   endif

# End Test 2

#------------------------------------------------------------------------#
# Test 3
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD multiple delete", "Same attribute diff instances"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0122"]

   # Delete two instances that meet the search criteria
   {before_operation} = find-all Object_D

   # Use for making sure that only two instances have actually been deleted.
   what_we_want = countof {before_operation}
   what_we_want = what_we_want - 2

   has_failed = FALSE

   failure_code = 0

   # Delete two instances where the same attribute for both instances are specified separately.
   delete Object_D where ReferenceD = 5 | ReferenceD = 6

   {after_operation} = find-all Object_D

   # None have been deleted
   if countof {before_operation} = countof {after_operation} then
      has_failed = TRUE
      failure_code = (-1)
   else
      # Try and find the instances directly
      fifth_instance = find-one Object_D where ReferenceD = 5 & IntegerA = 5
      sixth_instance = find-one Object_D where ReferenceD = 6 & IntegerA = 6

      if fifth_instance != UNDEFINED then
         failure_code = (-2)
         has_failed = TRUE
      else

         if sixth_instance != UNDEFINED then
            failure_code = (-3)
            has_failed = TRUE
         else
            what_we_got = countof {after_operation}

            # More or less than two instances have been deleted
            if what_we_want != what_we_got then
               failure_code = what_we_got - what_we_want
               has_failed = TRUE
            endif

         endif

      endif

   endif

   if has_failed = TRUE then
      [] = RPT3:Test_Failed["ObjD", Test, failure_code]
   else 
      [] = RPT2:Test_Passed["ObjD", Test, failure_code]
   endif

# End Test 3

#------------------------------------------------------------------------#
# Test 4
#------------------------------------------------------------------------#

   # Deletion of set of instance handles is unsupported.
   Test = Test + 1

   [] = RPT1:Start_Test[Test, "Null Requid", "Creation Deletion", "objD multiple delete", "Set of instance handles"]
   [] = RPT4:Test_Unsupported[Test]

# End Test 4

#------------------------------------------------------------------------#
# Test 5
#------------------------------------------------------------------------#

   # Deletion of all remaining instances.

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1103-0000-01-0532", "Creation Deletion", "objD multiple delete", "All remaining instance handles"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0121"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0122"]
   {before_operation} = find-all Object_D

   # Use for making sure that all remaining instances have actually been deleted.
   what_we_want = 0

   has_failed = FALSE

   failure_code = 0

   # Delete all remaining instances where ReferenceD is less than 100, 
   # should be all of them.
   delete Object_D where ReferenceD < 100

   {after_operation} = find-all Object_D

   # None have been deleted
   if countof {before_operation} = countof {after_operation} then
      has_failed = TRUE
      failure_code = (-1)
   else
      # Try and find any instance, doesn''t matter what it''s attributes are.
      any_instance = find-one Object_D

       # The instance is still defined.
      if any_instance != UNDEFINED then
         failure_code = (-2)
         has_failed = TRUE
      else
         # An instance has been found.
         if what_we_want != countof {after_operation} then
            failure_code = (-3)
            has_failed = TRUE
         endif

      endif

   endif

   if has_failed = TRUE then
      [] = RPT3:Test_Failed["ObjD", Test, failure_code]
   else
      [] = RPT2:Test_Passed["ObjD", Test, failure_code]
   endif

# End Test 5

#------------------------------------------------------------------------#

Returned_Test_Number = Test 

#Tests Complete

',
	3,
	'',
	"cf120b0c-57db-4a5c-8e91-1415ffd5ad13",
	2,
	2);
INSERT INTO O_TPARM
	VALUES ("2ee7cea5-ca72-4637-a7bf-f772bb66113f",
	"d7073c70-19f5-4c8a-b4c9-cde13d79637a",
	'Test_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("b53ea337-05e7-4be2-b94f-a07428d46508",
	"d7073c70-19f5-4c8a-b4c9-cde13d79637a",
	'Returned_Test_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	"2ee7cea5-ca72-4637-a7bf-f772bb66113f",
	'');
INSERT INTO O_NBATTR
	VALUES ("23147b17-0a16-44bb-af59-852d052304a4",
	"422351b6-ef0a-4ade-b14f-59a10353b86d");
INSERT INTO O_BATTR
	VALUES ("23147b17-0a16-44bb-af59-852d052304a4",
	"422351b6-ef0a-4ade-b14f-59a10353b86d");
INSERT INTO O_ATTR
	VALUES ("23147b17-0a16-44bb-af59-852d052304a4",
	"422351b6-ef0a-4ade-b14f-59a10353b86d",
	"00000000-0000-0000-0000-000000000000",
	'ReferenceD',
	' Preferred identifier.
',
	'',
	'ReferenceD',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5baacf70-1596-450e-a254-dd001d07318e",
	"422351b6-ef0a-4ade-b14f-59a10353b86d");
INSERT INTO O_BATTR
	VALUES ("5baacf70-1596-450e-a254-dd001d07318e",
	"422351b6-ef0a-4ade-b14f-59a10353b86d");
INSERT INTO O_ATTR
	VALUES ("5baacf70-1596-450e-a254-dd001d07318e",
	"422351b6-ef0a-4ade-b14f-59a10353b86d",
	"23147b17-0a16-44bb-af59-852d052304a4",
	'IntegerA',
	' An integer.
',
	'',
	'IntegerA',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"422351b6-ef0a-4ade-b14f-59a10353b86d");
INSERT INTO O_OIDA
	VALUES ("23147b17-0a16-44bb-af59-852d052304a4",
	"422351b6-ef0a-4ade-b14f-59a10353b86d",
	0,
	'ReferenceD');
INSERT INTO O_ID
	VALUES (1,
	"422351b6-ef0a-4ade-b14f-59a10353b86d");
INSERT INTO O_ID
	VALUES (2,
	"422351b6-ef0a-4ade-b14f-59a10353b86d");
INSERT INTO PE_PE
	VALUES ("422351b6-ef0a-4ade-b14f-59a10353b86d",
	1,
	"c852afc7-98ac-4492-988b-0303d2b80eff",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("c852afc7-98ac-4492-988b-0303d2b80eff",
	"00000000-0000-0000-0000-000000000000",
	"10f28eec-2c10-4bed-b362-3203399c1025",
	'classes',
	'',
	0,
	'../classes.xtuml');
